/**
 * 00_bits/utils
 * Utils module
 * Contains mixins, functions, and placeholders
 */

// Box shadow samples
$single_shadow: 0px 5px 10px -4px rgba(0, 0, 0, 0.3);
$form_focus_shadow: inset 0 5px 5px rgba(0, 0, 0, 0.025), 0 0 2px rgba(82, 168, 236, 0.6);
$inset_shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);

/**
 * Mixins.
 * @usage:
 * .selector {
 *  @include mixinName(args);
 * }
 */
@mixin sr-only {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0px;
  position: absolute;
  width: 1px;
}

@mixin hover {
  [data-whatinput="keyboard"] &:focus,
  &:hover,
  &:active,
  &.active,
  &[aria-expanded="true"] {
    @content;
  }
}

@mixin gradient ($left, $right){
  background: $right;
  background: linear-gradient(to right, $left 0%, $right 100%);
}

@mixin gradient-to-bottom ($top, $bottom){
  background: $bottom;
  background: linear-gradient(to bottom, $top 0%, $bottom 100%);
}


// String Replace for font-face mixin.
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    @if $src == null {
      $src: url(quote($path + "." + $extmod)) + " " + format(quote($format));
    } @else {
      $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin resetList ($margin: 0 0 spacing(), $padding: 0) {
  @include rem(margin, $margin);
  @include rem(padding, $padding);
  list-style:none;
}

@mixin marpad($m:0px,$p:0px) {
  @include rem(margin, $m);
  @include rem(padding, $p);
}

@mixin magicBox($perc:35) {
  position: relative;
  padding-bottom: $perc * 1%;
  height: 0;
}

@mixin quickSpan ($columns: $global_columns, $gutter: $global_gutter, $i: 6) {
  $col_width: (99.9998 / $columns);
  $col_remainder: ($gutter/$columns) * $i;
  width: ($col_width * $i - $gutter + $col_remainder) * 1%;
  margin-right: $gutter * 1%;
  float: left;
}

@mixin quickOffset ($columns: $global_columns, $gutter: $global_gutter, $i: 1) {
  $col_width: (99.9998 / $columns);
  $col_remainder: ($global_gutter/$global_columns) * $i;
  margin-left: (($col_width * $i - $gutter + $col_remainder) + $gutter) * 1%;
}

@function columnWidth ($i: 1, $columns: $global_columns, $gutter: $global_gutter) {
  $col_width: (99.9998 / $columns);
  $col_remainder: ($global_gutter/$global_columns) * $i;
  @return (($col_width * $i - $gutter + $col_remainder) + $gutter);
}

/*
Rem Mixin
*/
$rem-baseline: 10px !default;
$rem-fallback: true !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function _rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

// Clearfix
@mixin group {
  zoom: 1;
  &::before {
    display: table;
    content: "";
  }
  &::after {
    display: table;
    content: "";
    clear: both;
  }
}

@mixin borderBox {
  box-sizing: border-box;
  &::before, &::after {
    box-sizing: border-box;
  }
}
